# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyfacedetect', [dirname(__file__)])
        except ImportError:
            import _pyfacedetect
            return _pyfacedetect
        if fp is not None:
            try:
                _mod = imp.load_module('_pyfacedetect', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyfacedetect = swig_import_helper()
    del swig_import_helper
else:
    import _pyfacedetect
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class ImageData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyfacedetect.new_ImageData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["data"] = _pyfacedetect.ImageData_data_set
    __swig_getmethods__["data"] = _pyfacedetect.ImageData_data_get
    if _newclass:data = _swig_property(_pyfacedetect.ImageData_data_get, _pyfacedetect.ImageData_data_set)
    __swig_setmethods__["width"] = _pyfacedetect.ImageData_width_set
    __swig_getmethods__["width"] = _pyfacedetect.ImageData_width_get
    if _newclass:width = _swig_property(_pyfacedetect.ImageData_width_get, _pyfacedetect.ImageData_width_set)
    __swig_setmethods__["height"] = _pyfacedetect.ImageData_height_set
    __swig_getmethods__["height"] = _pyfacedetect.ImageData_height_get
    if _newclass:height = _swig_property(_pyfacedetect.ImageData_height_get, _pyfacedetect.ImageData_height_set)
    __swig_setmethods__["num_channels"] = _pyfacedetect.ImageData_num_channels_set
    __swig_getmethods__["num_channels"] = _pyfacedetect.ImageData_num_channels_get
    if _newclass:num_channels = _swig_property(_pyfacedetect.ImageData_num_channels_get, _pyfacedetect.ImageData_num_channels_set)
    __swig_destroy__ = _pyfacedetect.delete_ImageData
    __del__ = lambda self : None;
ImageData_swigregister = _pyfacedetect.ImageData_swigregister
ImageData_swigregister(ImageData)

class Rect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pyfacedetect.Rect_x_set
    __swig_getmethods__["x"] = _pyfacedetect.Rect_x_get
    if _newclass:x = _swig_property(_pyfacedetect.Rect_x_get, _pyfacedetect.Rect_x_set)
    __swig_setmethods__["y"] = _pyfacedetect.Rect_y_set
    __swig_getmethods__["y"] = _pyfacedetect.Rect_y_get
    if _newclass:y = _swig_property(_pyfacedetect.Rect_y_get, _pyfacedetect.Rect_y_set)
    __swig_setmethods__["width"] = _pyfacedetect.Rect_width_set
    __swig_getmethods__["width"] = _pyfacedetect.Rect_width_get
    if _newclass:width = _swig_property(_pyfacedetect.Rect_width_get, _pyfacedetect.Rect_width_set)
    __swig_setmethods__["height"] = _pyfacedetect.Rect_height_set
    __swig_getmethods__["height"] = _pyfacedetect.Rect_height_get
    if _newclass:height = _swig_property(_pyfacedetect.Rect_height_get, _pyfacedetect.Rect_height_set)
    def __init__(self): 
        this = _pyfacedetect.new_Rect()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyfacedetect.delete_Rect
    __del__ = lambda self : None;
Rect_swigregister = _pyfacedetect.Rect_swigregister
Rect_swigregister(Rect)

class FaceInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FaceInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FaceInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bbox"] = _pyfacedetect.FaceInfo_bbox_set
    __swig_getmethods__["bbox"] = _pyfacedetect.FaceInfo_bbox_get
    if _newclass:bbox = _swig_property(_pyfacedetect.FaceInfo_bbox_get, _pyfacedetect.FaceInfo_bbox_set)
    __swig_setmethods__["roll"] = _pyfacedetect.FaceInfo_roll_set
    __swig_getmethods__["roll"] = _pyfacedetect.FaceInfo_roll_get
    if _newclass:roll = _swig_property(_pyfacedetect.FaceInfo_roll_get, _pyfacedetect.FaceInfo_roll_set)
    __swig_setmethods__["pitch"] = _pyfacedetect.FaceInfo_pitch_set
    __swig_getmethods__["pitch"] = _pyfacedetect.FaceInfo_pitch_get
    if _newclass:pitch = _swig_property(_pyfacedetect.FaceInfo_pitch_get, _pyfacedetect.FaceInfo_pitch_set)
    __swig_setmethods__["yaw"] = _pyfacedetect.FaceInfo_yaw_set
    __swig_getmethods__["yaw"] = _pyfacedetect.FaceInfo_yaw_get
    if _newclass:yaw = _swig_property(_pyfacedetect.FaceInfo_yaw_get, _pyfacedetect.FaceInfo_yaw_set)
    __swig_setmethods__["score"] = _pyfacedetect.FaceInfo_score_set
    __swig_getmethods__["score"] = _pyfacedetect.FaceInfo_score_get
    if _newclass:score = _swig_property(_pyfacedetect.FaceInfo_score_get, _pyfacedetect.FaceInfo_score_set)
    def __init__(self): 
        this = _pyfacedetect.new_FaceInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyfacedetect.delete_FaceInfo
    __del__ = lambda self : None;
FaceInfo_swigregister = _pyfacedetect.FaceInfo_swigregister
FaceInfo_swigregister(FaceInfo)

class FacialLandmark(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FacialLandmark, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FacialLandmark, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pyfacedetect.FacialLandmark_x_set
    __swig_getmethods__["x"] = _pyfacedetect.FacialLandmark_x_get
    if _newclass:x = _swig_property(_pyfacedetect.FacialLandmark_x_get, _pyfacedetect.FacialLandmark_x_set)
    __swig_setmethods__["y"] = _pyfacedetect.FacialLandmark_y_set
    __swig_getmethods__["y"] = _pyfacedetect.FacialLandmark_y_get
    if _newclass:y = _swig_property(_pyfacedetect.FacialLandmark_y_get, _pyfacedetect.FacialLandmark_y_set)
    def __init__(self): 
        this = _pyfacedetect.new_FacialLandmark()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyfacedetect.delete_FacialLandmark
    __del__ = lambda self : None;
FacialLandmark_swigregister = _pyfacedetect.FacialLandmark_swigregister
FacialLandmark_swigregister(FacialLandmark)

class Rects(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rects, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rects, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num"] = _pyfacedetect.Rects_num_set
    __swig_getmethods__["num"] = _pyfacedetect.Rects_num_get
    if _newclass:num = _swig_property(_pyfacedetect.Rects_num_get, _pyfacedetect.Rects_num_set)
    __swig_setmethods__["data"] = _pyfacedetect.Rects_data_set
    __swig_getmethods__["data"] = _pyfacedetect.Rects_data_get
    if _newclass:data = _swig_property(_pyfacedetect.Rects_data_get, _pyfacedetect.Rects_data_set)
    def __init__(self, *args): 
        this = _pyfacedetect.new_Rects(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyfacedetect.delete_Rects
    __del__ = lambda self : None;
Rects_swigregister = _pyfacedetect.Rects_swigregister
Rects_swigregister(Rects)


def detectface(*args):
  return _pyfacedetect.detectface(*args)
detectface = _pyfacedetect.detectface
# This file is compatible with both classic and new-style classes.


